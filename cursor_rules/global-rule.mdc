---
alwaysApply: true
---
# SaaS Project Structure and Coding Guidelines

## Project Overview
We are building SaaS applications with:
- **Backend**: Flask (Python)
- **Frontend**: React (JavaScript)
- **Example use case**: Amazon Review Scraper (search → scrape reviews → filter by stars)

## Technology Stack
- **Backend**: Flask, requests, BeautifulSoup
- **Frontend**: React with functional components + hooks, axios for API calls

## Project Structure
```
project/
├── backend/                    # Flask backend application
│   ├── app.py                 # Main Flask application file
│   
├── frontend/                  # React frontend application
│   ├── src/
│   │   └── index.js          # Main frontend JavaScript file
│   └── package.json          # Node.js package configuration
├── README.md                 # Project documentation
├── .gitignore               # Git ignore patterns
└── requirements.txt       # Python dependencies
```

## Coding Guidelines

### Backend Development (Flask)
- **Location**: All backend code in `backend/`
- **Main file**: `backend/app.py`
- **Dependencies**: Add to `requirements.txt`
- **Structure**:
  - APIs must be RESTful and return JSON
  - Follow Flask best practices with error handling
  - Backend should never contain frontend code
- **Example APIs**:
  - `/search?keyword=xxx` → returns top 3 product URLs
  - `/reviews?url=xxx&stars=5` → returns reviews

### Frontend Development (React)
- **Location**: All frontend code must be written in the `frontend/` folder
- **Main file**: `frontend/src/index.js` - contains the main React application entry point
- **Dependencies**: Add React packages to `frontend/package.json`
- **Structure**:
  - Use React hooks and functional components
  - Communicate with backend via axios HTTP requests
- **Theme**: 
  - **Color Palette**
    - Primary: #1E293B (dark gray-blue)
    - Secondary/Accent: #3B82F6 (modern blue)
    - Background: #F9FAFB (light neutral)
    - Card Background: #FFFFFF (white)
  - **Typography**:
    - Font: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif
    - Headings: bold, slightly larger than body text
    - Body: normal weight, good line spacing
  - **General Principles**:
    - Minimal and clean look
    - Consistent spacing (use multiples of 8px for margin/padding)
    - Responsive by default (flex or grid when needed)

### Code Organization
- Keep backend and frontend code strictly separated in their respective folders
- Backend API endpoints should be RESTful and well-documented
- Frontend should communicate with backend via HTTP requests
- Follow consistent naming conventions within each technology stack
- Clear naming conventions
- Document APIs in README.md

### Development Workflow
1. Backend changes: Work in `backend/` folder
2. Frontend changes: Work in `frontend/` folder
3. Cross-cutting concerns: Document in README.md
4. Environment setup: Use appropriate package managers (pip for Python, npm for JavaScript) 